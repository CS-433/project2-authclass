[{"author": "lortabac", "body": "Millepiedi is a generic name that includes many other arthropods. A more specific name is \"scutigera\". https://it.wikipedia.org/wiki/Scutigera_coleoptrata", "created_utc": "1664307349.0", "edited": "False", "id": "iq573w5", "is_submitter": "False", "link_id": "t3_xovov0", "parent_id": "t1_iq4srrg", "score": "1", "subreddit": "languagelearning", "subreddit_id": "t5_2rjsc"}, {"author": "lortabac", "body": "As a southern Italian, I would say \"stavo malato\" in an informal conversation with fellow southerners, but I would say \"ero malato\" if I'm talking to someone from northern Italy or any kind of situation where standard Italian is needed.", "created_utc": "1663572194.0", "edited": "False", "id": "ip1bweo", "is_submitter": "False", "link_id": "t3_xhlvyp", "parent_id": "t1_iozxqdc", "score": "9", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "\"Spaghettata\" est un mot colloquial qui veut dire \"repas \u00e0 base de spaghetti\".\nEst-ce que sur le paquet il y a des instructions de cuisson (ou au-moins la liste des ingr\u00e9dients) ? Si tu nous montre une photo je peux essayer de traduire.", "created_utc": "1663079281.0", "edited": "False", "id": "io9fn4s", "is_submitter": "False", "link_id": "t3_xd8t0l", "parent_id": "t3_xd8t0l", "score": "8", "subreddit": "AskFrance", "subreddit_id": "t5_2zkfk"}, {"author": "lortabac", "body": "It depends what you mean by \"not speaking\".\nI have never met anyone of any age who can't speak Italian at all. However there are plenty of people who speak hesitantly or make lots of mistakes (generally because of word-by-word translation from their language/dialect to Italian).", "created_utc": "1662381013.0", "edited": "False", "id": "in6d2dl", "is_submitter": "False", "link_id": "t3_x6db2u", "parent_id": "t1_in6axiu", "score": "12", "subreddit": "languagelearning", "subreddit_id": "t5_2rjsc"}, {"author": "lortabac", "body": "In my experience learning a language is mostly about memorizing things. Programming is mostly about reasoning. In fact memorizing the syntax of a language is probably the least important part of programming.\n\nI'm not saying immersion is not useful. It can help you getting familiar with a programming language and expose you to various idioms and ways to solve the most common problems. But it's certainly not enough.", "created_utc": "1661173412.0", "edited": "False", "id": "ilbedlr", "is_submitter": "False", "link_id": "t3_wusa8v", "parent_id": "t3_wusa8v", "score": "10", "subreddit": "languagelearning", "subreddit_id": "t5_2rjsc"}, {"author": "lortabac", "body": "The problem goes away with some practice. You can see it clearly with bilingual children. They mix up the languages up to a certain age, until they learn to distinguish them properly, and use the language that is the most appropriate for the context.  \n\n\nAlso, think of simultaneous interpreters. They wouldn't be able to do their job if they had this kind of interference between languages.  \n\n\nSo, it's just a skill that can be practiced, like any other.", "created_utc": "1659692279.0", "edited": "False", "id": "ij17lzj", "is_submitter": "False", "link_id": "t3_wga5zs", "parent_id": "t3_wga5zs", "score": "2", "subreddit": "languagelearning", "subreddit_id": "t5_2rjsc"}, {"author": "lortabac", "body": "As some other user said, there is a continuum from colloquial to formal within standard Italian, but compared to languages like Persian, I find the difference between the various registers to be much smaller.\n\nThe situation is made more complicated by the presence of regional languages. Some of these languages can have colloquial and formal varieties themselves, and they are often mixed with standard Italian.\n\nMixing a regional language with Italian is often done in colloquial speech, but that's not an absolute rule. There are Italian accents with a strong local color which are actually considered posh (especially by the older generation).", "created_utc": "1653291115.0", "edited": "False", "id": "i9nqaqq", "is_submitter": "False", "link_id": "t3_uszf32", "parent_id": "t1_i97fqrh", "score": "1", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "LOL I am Neapolitan :)", "created_utc": "1653289718.0", "edited": "False", "id": "i9nooqt", "is_submitter": "False", "link_id": "t3_uszf32", "parent_id": "t1_i99i5fq", "score": "1", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "Why Italian? I am Italian and I feel that I use almost the same language all the time. We do have regional languages, but when we speak Italian it's generally always close to standard Italian, except maybe in some regions in central Italy.", "created_utc": "1652963199.0", "edited": "False", "id": "i96zzso", "is_submitter": "False", "link_id": "t3_uszf32", "parent_id": "t1_i96rre6", "score": "39", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "Haha I guess I am at risk of getting my citizenship revoked then...", "created_utc": "1650372839.0", "edited": "False", "id": "i5c4m9g", "is_submitter": "False", "link_id": "t3_u6zavt", "parent_id": "t1_i5c2qx5", "score": "1", "subreddit": "europe", "subreddit_id": "t5_2qh4j"}, {"author": "lortabac", "body": "Haha I'm Italian and I eat spaghetti with fork and spoon. I didn't know there was a rule forbidding it.", "created_utc": "1650371746.0", "edited": "False", "id": "i5c2do8", "is_submitter": "False", "link_id": "t3_u6zavt", "parent_id": "t1_i5bvuwm", "score": "8", "subreddit": "europe", "subreddit_id": "t5_2qh4j"}, {"author": "lortabac", "body": "These numbers refer to the inhabitants living inside the municipality borders. But most of these cities extend well beyond those borders.\n\nMy hypothesis is that, as the cities become bigger and bigger, people move towards the suburbs in search of cheaper houses, and the city centers host fewer people and more offices and shops.", "created_utc": "1645186470.0", "edited": "False", "id": "hxfqxwf", "is_submitter": "False", "link_id": "t3_svclgg", "parent_id": "t1_hxf83cg", "score": "14", "subreddit": "europe", "subreddit_id": "t5_2qh4j"}, {"author": "lortabac", "body": "I am a native Italian speaker who is also fluent in French. Your definitions seem correct to me. \"Smerdare\" and \"emmerder\" have very different meanings.\n\nMaybe it's a regional thing, I don't know.", "created_utc": "1641373423.0", "edited": "False", "id": "hrbzose", "is_submitter": "False", "link_id": "t3_rw4uqt", "parent_id": "t1_hr9wy3g", "score": "3", "subreddit": "europe", "subreddit_id": "t5_2qh4j"}, {"author": "lortabac", "body": "Whatever the language, I think working alone is always a bad idea, one of the reasons being lack of code reviews.\n\nAlso, it's hard to introduce a new language without having one or more seniors in the team and strong support from the management.\n\nEven then, I can say from experience that Haskell is the perfect scapegoat when things go wrong (even when the problems are non technical). You should really know what you are doing if you want to have some chance to succeed.", "created_utc": "1641034228.0", "edited": "False", "id": "hqsm4l8", "is_submitter": "False", "link_id": "t3_rt8t0s", "parent_id": "t3_rt8t0s", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Audio:\n\n[https://mega.nz/file/RlYSgbyI#92WAtHow7-HWh7WUHaVCkmWki9Wk0OxyeSunutFt4qQ](https://mega.nz/file/RlYSgbyI#92WAtHow7-HWh7WUHaVCkmWki9Wk0OxyeSunutFt4qQ)\n\nScore:\n\n[https://mega.nz/file/58JmWBZL#Qe7nabErCNBANFb-h4ck17jCx5\\_Dfu3fcLsx3j7Lc5U](https://mega.nz/file/58JmWBZL#Qe7nabErCNBANFb-h4ck17jCx5_Dfu3fcLsx3j7Lc5U)\n\nIt contains 9 references: 3 American, 3 Italian and 3 international/classical Christmas songs.\n\nSpoiler:\n\n>!Jingle bells, White Christmas, Astro del ciel, Tu scendi dalle stelle, Joy to the world, Quanno nascette ninno, Santa Claus is coming to town, In notte placida, Fermarono i cieli!<", "created_utc": "1639492529.0", "edited": "1639496491.0", "id": "hoij97r", "is_submitter": "True", "link_id": "t3_rfooj3", "parent_id": "t3_rfooj3", "score": "2", "subreddit": "composethisifyoucan", "subreddit_id": "t5_5a97r8"}, {"author": "lortabac", "body": "Neapolitan:\n\nI don't know the name of this phenomenon nor the exact rules, since we don't study Neapolitan at school. Gemination of the first letter of a word (some people call it the neuter gender) changes its meaning, making it somehow more abstract.\n\nFor example:\n\n\"'o niro\" (the black man), \"'o nniro\" (black as a colour)\n\n\"'o saje?\" (do you know him?), \"'o ssaje?\" (do you know it?)\n\n\"nu caf\u00e8\" (a cup of coffee), \"'o ccaf\u00e8\" (coffee)\n\nEDIT: Interestingly, I think this can be applied both to nous and verbs. If anyone has more information I'm curious to learn more about this.", "created_utc": "1639039803.0", "edited": "1639039999.0", "id": "hntyf1f", "is_submitter": "False", "link_id": "t3_rbwtv9", "parent_id": "t3_rbwtv9", "score": "5", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "Honestly neither interpretation sounds completely convincing to me. As a native Italian speaker, to my ears the reflexive form does not necessarily mean that semantically the clitic is the object or the subject. I consider it just an arbitrary variant of the verb, that somehow has a reflexive connotation in its meaning. An equivalent in English would be a verb followed by a preposition. You have \"go out\" which is literally go + out, but you have things like \"put up with\", which can be considered a different verb from \"put\".\n\nTL;DR: I think it's more appropriate to consider \"chiamarsi\" a separate verb, rather than \"chiamare\" + object or subject. But I am not a linguist, so I might be missing something.", "created_utc": "1637416989.0", "edited": "False", "id": "hldw71o", "is_submitter": "False", "link_id": "t3_qxw6wy", "parent_id": "t1_hld0cc1", "score": "5", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "This is my attempt:\nhttps://mega.nz/file/11hV1AKQ#0r2IjYYHmz7MWNgQjg57Jo_VizTdEUz6s7lbzVU4dPY\n\nI'm definitely out of my comfort zone, but nothing ventured nothing gained :)", "created_utc": "1636532436.0", "edited": "False", "id": "hk1nne9", "is_submitter": "True", "link_id": "t3_qphaki", "parent_id": "t3_qphaki", "score": "2", "subreddit": "composethisifyoucan", "subreddit_id": "t5_5a97r8"}, {"author": "lortabac", "body": "Brilliant! I think you really nailed it.", "created_utc": "1636532297.0", "edited": "False", "id": "hk1nh4b", "is_submitter": "True", "link_id": "t3_qphaki", "parent_id": "t1_hjzd4nr", "score": "1", "subreddit": "composethisifyoucan", "subreddit_id": "t5_5a97r8"}, {"author": "lortabac", "body": "I agree that you can't expect 100% of people to take the right actions independently. But we live in a data-driven world, where policies are determined by looking at surveys and statistics. Your behavior as a consumer and a potential elector does have a certain influence upon companies and politicians. Change has to start somewhere, or we are stuck in inertia forever.", "created_utc": "1635867862.0", "edited": "False", "id": "hj0uovv", "is_submitter": "False", "link_id": "t3_ql2kbz", "parent_id": "t1_hj0lcfw", "score": "4", "subreddit": "worldnews", "subreddit_id": "t5_2qh13"}, {"author": "lortabac", "body": "If you want to learn a language properly, just listen and repeat. There is no need to \"understand\" the logic behind the grammar rules. Sometimes the concepts make sense, sometimes they don't, that's not relevant for learning the language.", "created_utc": "1635850225.0", "edited": "False", "id": "hizvu54", "is_submitter": "False", "link_id": "t3_ql18n5", "parent_id": "t1_hizub2h", "score": "1", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "Plenty of developers start with Java, or even with C++. Does this mean they are \"very accessible\" languages?\n\nHaskell is more than 30 years old. It is as complex as many other languages of comparable age. As I said, there are other languages (like Elm) that fit your description better, due to their younger age and their deliberate focus on simplicity.", "created_utc": "1634720906.0", "edited": "False", "id": "hhcai1n", "is_submitter": "False", "link_id": "t3_qbvfsh", "parent_id": "t1_hhc8z0q", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Unfortunately I am not sure Haskell can be considered a very accessible programming language.\nMaybe Haskell 98 can somehow fit your description. But once you take all the various GHC extensions into account, then it's a different beast altogether.\nIf you are looking for a simple purely-functional language, I'd say something like Elm is a better choice.", "created_utc": "1634718150.0", "edited": "False", "id": "hhc7jbh", "is_submitter": "False", "link_id": "t3_qbvfsh", "parent_id": "t3_qbvfsh", "score": "9", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Currently GHC does not have support for dependent types. However you can emulate them thanks to a (somewhat complex) pattern called \"singletons\".\nThe article explains how the future extension DependentHaskell will help people get rid of the complexity of singletons and use the new built-in quantifiers instead.", "created_utc": "1631170796.0", "edited": "False", "id": "hc5lyjr", "is_submitter": "False", "link_id": "t3_pk9sr7", "parent_id": "t1_hc4hdph", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "This is a very good explanation for those who already use singletons and want to see how DependentHaskell will allow them to express the same ideas more easily.\n\nUnfortunately it doesn't help understanding why we need all those fancy types in the first place. In this sense, the title can be slightly misleading: this is not an article about the business value of dependent types. It is more about how DependentHaskell can help you get rid of all the boilerplate that is currently needed to emulate dependent types in Haskell.", "created_utc": "1631170586.0", "edited": "False", "id": "hc5lq73", "is_submitter": "False", "link_id": "t3_pk9sr7", "parent_id": "t3_pk9sr7", "score": "7", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "What are contracts? The idea seems interesting. Can you point me to some resources to read?", "created_utc": "1628940968.0", "edited": "False", "id": "h8wen5n", "is_submitter": "False", "link_id": "t3_p3m1xd", "parent_id": "t1_h8u15gp", "score": "1", "subreddit": "ProgrammerHumor", "subreddit_id": "t5_2tex6"}, {"author": "lortabac", "body": "Probably yes. But I don't know how convenient it would be, since AFAIK the language has not been designed to be used that way. You might even get a big performance penalty if the data structures are not persistent (I mean if a deep copy is performed on each update). So I'd say it looks like a bad idea, but I don't know Java very well.", "created_utc": "1628888980.0", "edited": "False", "id": "h8tzfqm", "is_submitter": "False", "link_id": "t3_p3m1xd", "parent_id": "t1_h8tlzn9", "score": "1", "subreddit": "ProgrammerHumor", "subreddit_id": "t5_2tex6"}, {"author": "lortabac", "body": "As a programmer who mostly works with functional programming, I think the main problem is not specifically classes, but mostly unrestricted mutability and side-effects.\n\nFunctional programming (because it encourages immutability and segregation of side-effects) makes local reasoning easier. You can look at a function in isolation and understand what it does (I'm simplifying here, but that's the idea).\nIn languages where side-effects are reflected in the types (for ex. Haskell) sometimes even the type signature can be enough, you don't need to read the code. As an extreme example, there are some Haskell plugins that --given a certain type signature-- can generate the code for you, and it's guaranteed to be the only sensible implementation.\n\nContrast this with a language with pervasive mutability and uncontrolled side-effects (most popular languages): whenever you call a method, you don't know whether the arguments will be mutated or not, you don't know whether it will print something on the screen, launch missiles or whatever. You have to jump to the definition and read the code of that method if you want to know.\n\nAnother thing that I dislike in OOP languages is the lack of sum types (some newer languages like Swift or Kotlin might have them though). For example in Java you can easily say that a class has attribute A and attribute B, but there is no easy way to say that it has **either** A **or** B. This makes business logic very awkward to encode sometimes.", "created_utc": "1628867641.0", "edited": "False", "id": "h8shjyt", "is_submitter": "False", "link_id": "t3_p3m1xd", "parent_id": "t1_h8s4ci2", "score": "108", "subreddit": "ProgrammerHumor", "subreddit_id": "t5_2tex6"}, {"author": "lortabac", "body": "It might work, but there is also an emotional aspect to consider. Speaking your mother tongue also means more spontaneity, more nuances, more silly jokes and playful moments... I would never give up all this with my children.", "created_utc": "1627555764.0", "edited": "False", "id": "h6xwp97", "is_submitter": "False", "link_id": "t3_ottg5c", "parent_id": "t3_ottg5c", "score": "2", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "Sorry to hear that. Some people are so arrogant...\n\nAlso, using bread to clean the plate is very common in Italy too. I don't understand why your colleagues were surprised.", "created_utc": "1624015131.0", "edited": "False", "id": "h274gpb", "is_submitter": "False", "link_id": "t3_o21e0s", "parent_id": "t1_h26r1l9", "score": "3", "subreddit": "europe", "subreddit_id": "t5_2qh4j"}, {"author": "lortabac", "body": "Actually there are plenty of Italian recipes with broken spaghetti. However it's only done with certain sauces and it requires a different method of cooking pasta. If you do it the wrong way children will die.", "created_utc": "1623999626.0", "edited": "False", "id": "h26n2qe", "is_submitter": "False", "link_id": "t3_o21e0s", "parent_id": "t1_h26kuzj", "score": "17", "subreddit": "europe", "subreddit_id": "t5_2qh4j"}, {"author": "lortabac", "body": "Another source of inconsistency is `Type :: Type` (the fact that the type of types is `Type`). As far as I understand this is a less serious kind of inconsistency than non-termination.\n\nDisclaimer: I'm not a mathematician, my understanding of these issues is rather superficial.", "created_utc": "1622789880.0", "edited": "False", "id": "h0jg2nh", "is_submitter": "False", "link_id": "t3_nqx5t3", "parent_id": "t1_h0f6cy5", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I think the post is mixing up two different concepts: structural/nominal and extensible/fixed.\n\nYou can have a language with structural non-extensible records, in which an argument of type `{foo : Int}` only accepts records with exactly a single field named `foo` of type `Int`.\nAnd yet that doesn't make record types nominal: any type of that exact shape is interchangeable with the others.\n\nConversely, you can have extensible nominal records, and in fact Haskell does have them thanks to the `HasField` class.\n\nIncidentally, GHC also has anonymous sums https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/primitives.html#unboxed-sums", "created_utc": "1618224577.0", "edited": "False", "id": "gu8oo07", "is_submitter": "False", "link_id": "t3_moojje", "parent_id": "t3_moojje", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Yes, in most cases a sum type is enough.\n\nHowever sometimes (it generally happens in library code) you want to give users the ability to use your code with their own data-types without having to modify it and recompile it. That's where existentials are useful.\n\nYou can say for example that the elements of the list can be of any type, as long as it is an instance of a given type class. Then users can define the instances in their own code.\n\nExample:\n\n    data Element = forall a. MyClass a => Element a\n\nYou can look up \"expression problem\" to learn more about this topic.\n\nhttps://stackoverflow.com/questions/3596366/what-is-the-expression-problem", "created_utc": "1616060575.0", "edited": "False", "id": "grc3o37", "is_submitter": "False", "link_id": "t3_m7mi79", "parent_id": "t3_m7mi79", "score": "16", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I've used plain vim + GHCI for years at work. IMHO you don't need anything else until your code base is >100k lines.", "created_utc": "1613727172.0", "edited": "False", "id": "gnzo786", "is_submitter": "False", "link_id": "t3_lmrfg9", "parent_id": "t3_lmrfg9", "score": "4", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Just keep in mind that GHC has a couple of ad-hoc rules concerning `$`. Off the top of my head, `runST <| do...` wouldn't typecheck and IIRC `pure <| ...` would not work as expected with `ApplicativeDo`.", "created_utc": "1612010353.0", "edited": "False", "id": "gld21qt", "is_submitter": "False", "link_id": "t3_l6tfxm", "parent_id": "t3_l6tfxm", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "You need `GHC.TypeLits.someSymbolVal`.\n\n    import GHC.TypeLits\n    \n    main = do\n        s <- getLine\n        case someSymbolVal s of\n            SomeSymbol p -> putStrLn (symbolVal p)", "created_utc": "1609233149.0", "edited": "False", "id": "ghdmlei", "is_submitter": "False", "link_id": "t3_km9f52", "parent_id": "t3_km9f52", "score": "6", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "GHC only performs a syntactic check. Evaluation is not taken into account.\n\nFrom the GHC user guide:\n\n\"A variable is regarded as \u201cused\u201d if it is exported, or it appears in the right hand side of a binding that binds at least one used variable that is used\"\n\nhttps://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wunused-top-binds", "created_utc": "1606401890.0", "edited": "False", "id": "gdnzx9f", "is_submitter": "False", "link_id": "t3_k1dggw", "parent_id": "t3_k1dggw", "score": "7", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "What if the dictionary is passed at construction time and stored in the data structure itself?", "created_utc": "1604664923.0", "edited": "False", "id": "gbc66el", "is_submitter": "False", "link_id": "t3_jonjy8", "parent_id": "t1_gbade1u", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "You are right. I should have read the stackoverflow question before answering! As someone said in another comment, there is `HasType` in `generic-lens`.", "created_utc": "1604064475.0", "edited": "False", "id": "galj32q", "is_submitter": "False", "link_id": "t3_jkt4hs", "parent_id": "t1_galecjo", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "~~The HasField class in GHC.Records does exactly that~~.", "created_utc": "1604060624.0", "edited": "1604064529.0", "id": "gald730", "is_submitter": "False", "link_id": "t3_jkt4hs", "parent_id": "t1_galavlr", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "That's so true.", "created_utc": "1603103191.0", "edited": "False", "id": "g9b73g8", "is_submitter": "False", "link_id": "t3_jd33tq", "parent_id": "t1_g96tig7", "score": "7", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Humans are notoriously bad at predicting the future, even the near one.", "created_utc": "1601280493.0", "edited": "False", "id": "g6xn9m0", "is_submitter": "False", "link_id": "t3_j0w6pm", "parent_id": "t3_j0w6pm", "score": "5", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "This implementation looks good to me. If you prefer, there is an alternative syntax:\n\n    nextPlayer :: Player -> Player\n    nextPlayer P1 = P2\n    nextPlayer P2 = P1", "created_utc": "1600177568.0", "edited": "False", "id": "g5crq78", "is_submitter": "False", "link_id": "t3_it8vqs", "parent_id": "t3_it8vqs", "score": "15", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Refactoring. You can refactor more aggressively and with more confidence than you would do in C++.\n\nThis means that you can start with code that \"just works\" and improve it later. In fact Haskell code bases tend to get cleaner and cleaner over time.", "created_utc": "1583094701.0", "edited": "False", "id": "fj7occd", "is_submitter": "False", "link_id": "t3_fbztgp", "parent_id": "t3_fbztgp", "score": "28", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "True, but in most medium/big projects you use different types for internal logic, storage and public interfaces. I don't see any problem in naming your public-facing types consistently with the public JSON schema.", "created_utc": "1582797875.0", "edited": "False", "id": "fiwqan1", "is_submitter": "False", "link_id": "t3_fa8kdx", "parent_id": "t1_fiwoxzk", "score": "18", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "\"Call by value\", I guess.", "created_utc": "1582720018.0", "edited": "False", "id": "fithann", "is_submitter": "False", "link_id": "t3_f9oci9", "parent_id": "t1_fitgp6k", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Fair point.\n\nI think we can agree that Haskell does not fit the definition of \"what academia has to offer in the state of the art\". Academic research is way ahead of Haskell in plenty of areas. There is too much Haskell code in production to experiment freely and break things.", "created_utc": "1580473704.0", "edited": "False", "id": "fg37urb", "is_submitter": "False", "link_id": "t3_ewjnf4", "parent_id": "t1_fg344fi", "score": "9", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "> I wanted to break free of the practitioner's pragmatic culture and see what academia had to offer in the start of the art\n\nIf this is your purpose I'm not sure Haskell is the right choice. Haskell is a pragmatic language which has been used in the industry for several years.", "created_utc": "1580457873.0", "edited": "False", "id": "fg2vny9", "is_submitter": "False", "link_id": "t3_ewjnf4", "parent_id": "t3_ewjnf4", "score": "22", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "> You'll stumble upon whiteboards with diagrams, and even the most basic materials won't avoid using strange terms, such as monoids, monads, or functors. Check videos from Bartosz Milewski as an illustration of what I mean:\n\nThese videos are not about Haskell. I don't disagree with the sentiment expressed in this paragraph, but IMHO the example is wrong.\n\nNow, as to why some people consider a Category Theory lesson as Haskell learning material, that is another problem...", "created_utc": "1579077522.0", "edited": "False", "id": "feg58wp", "is_submitter": "False", "link_id": "t3_eokuao", "parent_id": "t3_eokuao", "score": "7", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I disagree. The chapter \"Regain purity\" explains how to restrict access to arbitrary IO only to the functions that need it. That's the exact opposite of \"everything in IO\".", "created_utc": "1571066631.0", "edited": "False", "id": "f3pxuj8", "is_submitter": "False", "link_id": "t3_dhac60", "parent_id": "t1_f3pfqmh", "score": "7", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "If you want to hide the shape of your data you don't export the constructors. I don't think the author is arguing against abstract types.\n\nIn my understanding they are saying that algebraic data types and pattern-matching are _language features_ that have clear benefits and no downsides. They contrast the simplicity of ADT's with the complexity and obscurity of other languages features such as purity, strong types and monads.", "created_utc": "1570104369.0", "edited": "False", "id": "f29uhto", "is_submitter": "False", "link_id": "t3_dclflr", "parent_id": "t1_f29fh0r", "score": "7", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Also, purity and a richer ecosystem.", "created_utc": "1569840341.0", "edited": "False", "id": "f1zaxp1", "is_submitter": "False", "link_id": "t3_db8t8k", "parent_id": "t1_f1z9n60", "score": "11", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "https://youtu.be/hIZxTQP1ifo (there is also a link to this video in the article).", "created_utc": "1569840280.0", "edited": "False", "id": "f1zau9c", "is_submitter": "False", "link_id": "t3_db8t8k", "parent_id": "t1_f1z9n60", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I guess in this context it means \"this project does not build with stack\".", "created_utc": "1564488582.0", "edited": "False", "id": "evf4ty0", "is_submitter": "False", "link_id": "t3_cjlt5x", "parent_id": "t1_evf0xu9", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Il suffragio universale \u00e8 come permettere a tutti i maggiorenni di guidare senza patente. Anzi peggio, perch\u00e9 il voto pu\u00f2 fare pi\u00f9 danni di un'automobile.\nCi vorrebbe almeno un esame sulle nozioni di base, cos'\u00e8 il governo, il parlamento, la costituzione ecc.", "created_utc": "1560027490.0", "edited": "False", "id": "eqfvnf2", "is_submitter": "False", "link_id": "t3_by6l3k", "parent_id": "t1_eqe6sih", "score": "1", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "I agree with your point in general, but in Haskell type families are not parametric.\n\nFor example, GHC will not prevent you from defining a function like:\n\n    type family KindOf (a :: k) :: Type where\n      KindOf 'False = Bool\n      KindOf 'True  = Bool\n      KindOf ()     = Type\n      KindOf 0      = Nat\n      ...\n\nIs `a` a parameter or an index? I don't know.", "created_utc": "1559131163.0", "edited": "False", "id": "epaomcp", "is_submitter": "False", "link_id": "t3_btxt2j", "parent_id": "t1_ep5dlu7", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Nel formato markdown, un numero seguito da un punto introduce una linea in un elenco. E la numerazione parte sempre da uno, indipendentemente dal numero che metti.", "created_utc": "1559072428.0", "edited": "False", "id": "ep6qt24", "is_submitter": "False", "link_id": "t3_bu1r6c", "parent_id": "t1_ep6hutl", "score": "8", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "Ahahah. In realt\u00e0 esistono tantissime ricette con gli spaghetti spezzati, a volte misti ad altri tipi di pasta. Per\u00f2 credo che sia una tradizione solo napoletana.", "created_utc": "1558899887.0", "edited": "False", "id": "eovs5u6", "is_submitter": "False", "link_id": "t3_btaep0", "parent_id": "t1_eove3d5", "score": "1", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "Forse mi sono espresso male. Parlavo di locali completamente inutilizzati.", "created_utc": "1558342461.0", "edited": "False", "id": "eo7lv79", "is_submitter": "False", "link_id": "t3_bqjjyb", "parent_id": "t1_eo7lelu", "score": "1", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "Manco da Napoli da anni, quindi potrei dire sciocchezze. L'idea era di fare qualcosa di simile alla City di Londra, ma in pratica non ha avuto un grande successo. L'ultima volta che ci sono stato molti locali commerciali erano vuoti. La zona \u00e8 un po' decentrata e difficilmente accessibile con i mezzi pubblici, il che non aiuta.", "created_utc": "1558296968.0", "edited": "False", "id": "eo5gz7b", "is_submitter": "False", "link_id": "t3_bqjjyb", "parent_id": "t1_eo5f5s9", "score": "30", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "Most of these rules are quite similar in Italian. There are small differences, like \"ci sono dovuto andare\" vs \"j'ai d\u00fb y aller\", but I don't think French grammar is more irregular than Italian grammar (ignoring spelling, of course).", "created_utc": "1558296571.0", "edited": "False", "id": "eo5g6np", "is_submitter": "False", "link_id": "t3_bqfdmp", "parent_id": "t1_eo58srl", "score": "3", "subreddit": "todayilearned", "subreddit_id": "t5_2qqjc"}, {"author": "lortabac", "body": "La zona dei grattacieli si chiama \"centro direzionale\". Molti napoletani non ne sono molto fieri, perch\u00e9 il progetto \u00e8 stato un mezzo fallimento. Forse \u00e8 per questo che non si vede spesso nelle foto.", "created_utc": "1558295094.0", "edited": "False", "id": "eo5d6jv", "is_submitter": "False", "link_id": "t3_bqjjyb", "parent_id": "t1_eo56k49", "score": "41", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "> By that period the language of neighbouring Naples was already well on its way to becoming early Italian\n\nWow! So many false statements in so few words.", "created_utc": "1557949371.0", "edited": "False", "id": "ennp2p5", "is_submitter": "False", "link_id": "t3_bp1sur", "parent_id": "t3_bp1sur", "score": "1", "subreddit": "linguistics", "subreddit_id": "t5_2qhos"}, {"author": "lortabac", "body": "I don't see functional programming mentioned anywhere in the article. Did I miss something?", "created_utc": "1557212460.0", "edited": "False", "id": "empuvbq", "is_submitter": "False", "link_id": "t3_blmzil", "parent_id": "t3_blmzil", "score": "8", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "If you want to understand the sentence \"Monads are monoids in the category of endofunctors.\", you have to understand categories, monoids and endofunctors first. I suggest you to slow down and tackle each of these concepts separately. Category theory is hard even for mathematicians. It takes time to digest.\n\nThat said, you don't need to understand the definition of monads in order to **use** them. For example, you can start from the `Maybe` data-type, and learn what happens if you chain multiple Maybes with `>>=`. Then you can learn `IO`, `Either e` etc., play with `do` notation, learn how to desugar it. You can develop complete Haskell programs without knowing what a monad is. In fact, there are plenty of experienced Haskell developers who don't know category theory but can write advanced applications and libraries.", "created_utc": "1556784137.0", "edited": "False", "id": "emas1sr", "is_submitter": "False", "link_id": "t3_bjnzxg", "parent_id": "t3_bjnzxg", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "> It is just an interface with two methods, and there are some properties these methods should hold.\n\nAs far as I remember this is how I learned monads. I learned that it was a type-class with some special syntactic support, I studied the behavior of the individual instances (`IO`, `Maybe`, `Either`, `[]`), and I practiced desugaring manually to get familiar with the `do` notation. The general intuition has come slowly by itself, I don't remember having to put any special effort into it.\n\nNone of the monad tutorials made any sense when I was a beginner. Luckily I had read somewhere that I should avoid monad tutorials. In hindsight, it was great advice.", "created_utc": "1556523398.0", "edited": "False", "id": "em1kz4z", "is_submitter": "False", "link_id": "t3_bhp0zr", "parent_id": "t1_elv7nz5", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Veramente ho vissuto in diversi paesi in cui il cibo era altrettanto buono che in Italia.\n\nSulla capacit\u00e0 argomentativa dei non-italiani non commento neanche. L'idea che gli italiani siano l'unico popolo al mondo capace di discorsi complessi \u00e8 cos\u00ec ridicola che spero sia una battuta.", "created_utc": "1556478785.0", "edited": "False", "id": "em02txk", "is_submitter": "False", "link_id": "t3_bia8o4", "parent_id": "t1_elzrcug", "score": "12", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "Haskell :)", "created_utc": "1556020708.0", "edited": "False", "id": "elkdhiv", "is_submitter": "False", "link_id": "t3_bfqb3s", "parent_id": "t1_elhjefv", "score": "1", "subreddit": "ProgrammerHumor", "subreddit_id": "t5_2tex6"}, {"author": "lortabac", "body": "In Francia in molte citt\u00e0 \u00e8 abbastanza simile. A volte quando una macchina si ferma per farti attraversare c'\u00e8 n'\u00e8 una dietro che la supera, per cui bisogna essere doppiamente attenti.\n\nPaese che vai, usanza che trovi \u00af\\_(\u30c4)_/\u00af\n\nIn genere aspetto pazientemente finch\u00e9 l'attraversamento non \u00e8 sicuro. Non ho voglia di rischiare la vita per una questione di principio, anche se capisco la frustrazione di chi lo fa.", "created_utc": "1555789065.0", "edited": "False", "id": "eldd87y", "is_submitter": "False", "link_id": "t3_bfdet6", "parent_id": "t3_bfdet6", "score": "2", "subreddit": "italy", "subreddit_id": "t5_2qkhk"}, {"author": "lortabac", "body": "I have a simpler solution. No extensions, no type classes :P\n\n```\nimport Unsafe.Coerce\n\ncoolThing :: ([a] -> [a]) -> ([Integer], [String])\ncoolThing perm = (unsafeCoerce perm [0, 1], unsafeCoerce perm [\"Higher\", \"Rank\", \"Polymorphism\"])\n\nexamples :: IO ()\nexamples = do\n    print (coolThing id)\n    print (coolThing reverse)\n    print (coolThing (reverse . rot 2))\n    print (coolThing (rot 1 . reverse))\n\nrot :: Int -> [a] -> [a]\nrot n xs = zs ++ ys where\n    (ys, zs) = splitAt n xs\n```\n\n\\</troll>", "created_utc": "1553677451.0", "edited": "False", "id": "ejhf4su", "is_submitter": "False", "link_id": "t3_b5pojg", "parent_id": "t3_b5pojg", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "In my understanding event-sourcing projections are more similar to the Elm model, in which the current state is computed through a sort of `foldl` on the events.\n\nThis is quite different from the FRP approach, in which there is no projection at all. Behaviors are kind of composable projections themselves.\n\nI use CQRS everyday at work, and I've played a little bit with FRP libraries in my free time. To me the two paradigms look quite different. Unless you mean it in a very broad sense (for example both allow for a declarative style) I struggle to see how they are the same thing.", "created_utc": "1553526546.0", "edited": "False", "id": "ejccpnv", "is_submitter": "False", "link_id": "t3_b57vw0", "parent_id": "t1_ejc5893", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "The expression \"Functional Reactive Programming\" is generally used (at least in the Haskell community) to describe a specific programming paradigm, based on first-class \"behaviors\" (values that can vary over time) and \"events\" (conditions that occur at a given time). In other contexts I've seen people use the term \"reactive programming\" to describe asynchronous data-flows. The name is similar, but the concepts are as different as Java and JavaScript :)", "created_utc": "1553518072.0", "edited": "False", "id": "ejc278j", "is_submitter": "False", "link_id": "t3_b57vw0", "parent_id": "t1_ejbw5bj", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "In my understanding the joke is about Haskell being difficult to learn. The other languages are only there to support the \"punchline\" at the end.", "created_utc": "1553509025.0", "edited": "False", "id": "ejbuq1w", "is_submitter": "False", "link_id": "t3_b55nif", "parent_id": "t1_ejbgane", "score": "0", "subreddit": "ProgrammerHumor", "subreddit_id": "t5_2tex6"}, {"author": "lortabac", "body": "Interesting project, but how does it relate to Functional Reactive Programming?", "created_utc": "1553505993.0", "edited": "False", "id": "ejbswlr", "is_submitter": "False", "link_id": "t3_b57vw0", "parent_id": "t3_b57vw0", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I would rather opt for a solution like the one u/gagandeepb proposed. You \"open\" the record by converting it to a more flexible data type, you modify it and then you \"close\" it again by converting it to the target record.", "created_utc": "1552251524.0", "edited": "False", "id": "ei8ce07", "is_submitter": "False", "link_id": "t3_aylr10", "parent_id": "t1_ei80a4g", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Last time I checked I only found functions to do automatic upcasting (removing fields) but nothing to downcast (add fields). However I am pretty sure it is doable. I should give it a try when I have time.", "created_utc": "1552076603.0", "edited": "False", "id": "ei3eajp", "is_submitter": "False", "link_id": "t3_aylr10", "parent_id": "t1_ei2swmq", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "If you want to have separate types, you have to suffer a little bit. You need to enable `DuplicateRecordFields` and either leverage the `GHC.Records` machinery to select fields (and to update them https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0042-record-set-field.rst) or use something like `generic-lens` to generate lenses. In both cases the mapping functions will be a little verbose.\n\nHowever this approach allows you to avoid nested types and keep the accessors simple. It also allows for better generic instances for aeson etc., which is a big plus if you don't like to write them by hand.\n\nSo ultimately it depends on what your priorities are.", "created_utc": "1552049188.0", "edited": "False", "id": "ei2dp5t", "is_submitter": "False", "link_id": "t3_aylr10", "parent_id": "t3_aylr10", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "*g\u00fczel ;) Y\u00fczde y\u00fcz kat\u0131l\u0131yorum! It differs considerably from IE grammars but is relatively easy to grasp thanks to its consistency and regularity.", "created_utc": "1550920051.0", "edited": "False", "id": "eh3h2to", "is_submitter": "False", "link_id": "t3_atmnzr", "parent_id": "t1_eh2simk", "score": "1", "subreddit": "conlangs", "subreddit_id": "t5_2red7"}, {"author": "lortabac", "body": "I don't know Paris very well. When I go there I usually stay in Montparnasse. So I'd say some cafe in that area, unless someone knows of a better place.", "created_utc": "1550825580.0", "edited": "False", "id": "eh0ovvv", "is_submitter": "False", "link_id": "t3_at84vi", "parent_id": "t1_eh0n85n", "score": "1", "subreddit": "conlangs", "subreddit_id": "t5_2red7"}, {"author": "lortabac", "body": "What about Monday evening?", "created_utc": "1550822470.0", "edited": "False", "id": "eh0mz60", "is_submitter": "False", "link_id": "t3_at84vi", "parent_id": "t3_at84vi", "score": "1", "subreddit": "conlangs", "subreddit_id": "t5_2red7"}, {"author": "lortabac", "body": "Plot twist: the cucumber is stuck to the cutting board.", "created_utc": "1550586811.0", "edited": "False", "id": "egswx2d", "is_submitter": "False", "link_id": "t3_as9yhf", "parent_id": "t3_as9yhf", "score": "1", "subreddit": "gifs", "subreddit_id": "t5_2qt55"}, {"author": "lortabac", "body": "Hard question. The book is entirely in Italian, so it only applies to the show. I think they did a good job in at least avoiding modern teenager slang, which would have been anachronistic.\nFor the rest, I can't say. The language itself didn't change much. But I guess young people must have had some kind of slang at that time too. It's hard to know after so many years.", "created_utc": "1550571597.0", "edited": "False", "id": "egsjtv2", "is_submitter": "False", "link_id": "t3_arsolc", "parent_id": "t1_egrc46t", "score": "2", "subreddit": "mybrilliantfriendhbo", "subreddit_id": "t5_rlzto"}, {"author": "lortabac", "body": "I don't think you missed any essential details. In my opinion both the book and the show have been thought for an international audience. While there is a local aspect to the story, what really makes it great is its universality.\n\nI'd dare say the show can be even disappointing to Neapolitan audience expecting a perfectly realistic reconstruction of the neighborhood, of its culture and language. This is not the point of the book. Notice for example how in the first season the word \"Camorra\" is never said, even though that's what the Solara are. Instead, a word that is often used is \"money\", which is a more universal concept.\n\nSide note, there is an easy way to distinguish the two languages. All Italian words end with a, e, i or o. Whereas Neapolitan words always end with a schwah sound, like the \"a\" in \"idea\". I hope it helps.", "created_utc": "1550525175.0", "edited": "False", "id": "egr8e0s", "is_submitter": "False", "link_id": "t3_arsolc", "parent_id": "t3_arsolc", "score": "3", "subreddit": "mybrilliantfriendhbo", "subreddit_id": "t5_rlzto"}, {"author": "lortabac", "body": "Actually your idea about making the distinction between voiced and unvoiced consonants phonologically irrelevant is not as crazy as you seem to imply.\n\nFor example in my native language (Neapolitan) in some cases the distinction can be quite blurred (intervocalic or after n). There is even a recent trend in rap music to pronounce those consonants completely unvoiced to achieve a more \"rhythmical\" sound. If I hear someone talking like that I find it a little strange but I wouldn't say it's wrong.", "created_utc": "1550225886.0", "edited": "False", "id": "egirudd", "is_submitter": "False", "link_id": "t3_amxipu", "parent_id": "t3_amxipu", "score": "1", "subreddit": "auxlangs", "subreddit_id": "t5_35plw"}, {"author": "lortabac", "body": "Yes. \"Bug\" was the wrong word. Maybe I should have said \"incorrect (but not unsafe) code\".", "created_utc": "1549705655.0", "edited": "False", "id": "eg2wi1o", "is_submitter": "False", "link_id": "t3_ao2abu", "parent_id": "t1_eg209ei", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "The problem only arises in library code, when you export functions but do not use them anywhere.\n\nA silly example:\n\n    class Show_ a where\n        show_ :: String -- I forgot a parameter here, but it compiles\n\nOf course, this example is too simple to be problematic, but when writing more complex library code these errors can be more difficult to spot. The thing is, currently there is no way to distinguish between \"`a` must be provided by the caller\" and \"`a` should be inferrable but it is not, because I made a mistake\".", "created_utc": "1549621364.0", "edited": "False", "id": "eg0dg4w", "is_submitter": "False", "link_id": "t3_ao2abu", "parent_id": "t1_efyxllm", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "You can use `@_` to skip a parameter.", "created_utc": "1549545738.0", "edited": "False", "id": "efxwhi6", "is_submitter": "False", "link_id": "t3_ao2abu", "parent_id": "t1_efxto9l", "score": "17", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Another downside of `AllowAmbiguousTypes` is that it must be enabled for the whole module, which may lead to accidentally ambiguous types elsewhere in the code and hide bugs. As u/ocharles said, I hope `DependentHaskell` will provide a proper solution through visible dependent quantification.", "created_utc": "1549541665.0", "edited": "False", "id": "efxswh0", "is_submitter": "False", "link_id": "t3_ao2abu", "parent_id": "t3_ao2abu", "score": "6", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I think this is a good introduction to type-classes, but the explanation of visible type applications is a little misleading. It gives the false impression that type applications only work with type-classes.\n\nType applications allow instantiating **any** type variable with a type argument, whether mentioned in a constraint or not.\n\nEx:\n\n    Prelude> :t const\n    const :: a -> b -> a\n    Prelude> :t const @Int @String\n    const @Int @String :: Int -> String -> Int\n\nIn GHCI you can see the variables that are available for type application by enabling `-fprint-explicit-foralls` and using `:type +v` instead of `:type`.\nAll the variables mentioned in the `forall`, except those displayed in curly braces, are available for type application.\n\nhttps://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#visible-type-application", "created_utc": "1545914658.0", "edited": "False", "id": "ecnj3yz", "is_submitter": "False", "link_id": "t3_a9t5l9", "parent_id": "t3_a9t5l9", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "> That's one reason why programmers don't use Haskell.\n\nI should ask my employer to change my job title then :)", "created_utc": "1545908238.0", "edited": "False", "id": "ecndl4j", "is_submitter": "False", "link_id": "t3_a9olvk", "parent_id": "t1_ecnb90j", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "It doesn't work for me because vegetables are the part of the meal that I like the most.", "created_utc": "1545854953.0", "edited": "False", "id": "eclv4a2", "is_submitter": "False", "link_id": "t3_a9n63p", "parent_id": "t1_eckx5d8", "score": "1", "subreddit": "Documentaries", "subreddit_id": "t5_2qhlh"}, {"author": "lortabac", "body": "We have it in Italy too. It was my favorite shepherd when I was a child :)", "created_utc": "1545776289.0", "edited": "False", "id": "ecjoiz6", "is_submitter": "False", "link_id": "t3_a9di9i", "parent_id": "t1_ecii7vf", "score": "1", "subreddit": "europe", "subreddit_id": "t5_2qh4j"}, {"author": "lortabac", "body": "There is also [https://github.com/typeable/schematic](https://github.com/typeable/schematic), notably the \\`Data.Schematic.Migration\\` module.", "created_utc": "1534150131.0", "edited": "False", "id": "e43r1jb", "is_submitter": "False", "link_id": "t3_96racn", "parent_id": "t1_e439v63", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "\\`versioning\\` provides a \\`V\\` data-type to represent a version number. In theory you could use it with any encoding, so, for example, you could rewrite this blog post and just replace \\`Nat\\` with \\`V\\`.\n\nHowever if you use the encoding proposed in the README --that is if you think in terms of adding/removing fields at each version-- not only it makes for less verbose data-declarations but it also opens the way for automatic upcasting and decoding, which is where the library shines IMHO. I wonder how hard it would be to achieve the same level of automatization with GADTs.\n\nOne thing that a GADT-based encoding gives you is dependent pattern-matching, but I'm adding singletons for the \\`V\\` type, so something equivalent should be possible soon.\n\nAnyway, good to see that people are looking for type-safe ways of solving the versioning problem. I'm pretty sure there is still a lot to explore.", "created_utc": "1534148209.0", "edited": "False", "id": "e43q5kn", "is_submitter": "False", "link_id": "t3_96racn", "parent_id": "t1_e439v63", "score": "4", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Once you enable `DuplicateRecordFields` you need to be able to actually use those fields. Personally I see these classes as the minimum that is needed to make this extension useful.\n\nYou can't expect all users to do advanced generic programming or incur an external dependency as the only possible way to use records.\n\nMoreover there are cases that generic-lens cannot handle but the built-in mechanism can. I can't post examples now because I am on mobile. IIRC it was a problem with type families.", "created_utc": "1533980817.0", "edited": "False", "id": "e401hq9", "is_submitter": "False", "link_id": "t3_96eyzw", "parent_id": "t1_e400el2", "score": "16", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Some options that come to my mind:\n\n1. Wrap each optional field in a `Maybe`.\n\n2. Pass the arguments one by one (or in tuples) if a function does not need the whole record.\n\n3. Provide a `defaultConfig` function to make it easier to fill all the record fields.\n\n4. Start with the smallest record, add a type-parameter and an `extra` field that allows extending the record with the parametric type. This can lead to nested data-structures.\n\n5. Use `-XDuplicateRecordFields` and define a different type for each set of fields that you need. Then access the fields using lenses or the `GHC.Records.HasField` class.\n\n6. Use a library that gives you extensible records.", "created_utc": "1532676749.0", "edited": "False", "id": "e349ft2", "is_submitter": "False", "link_id": "t3_91zbcq", "parent_id": "t3_91zbcq", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "> social pressure, conformity, shame, etc., influence people.\n\nExcept in this case the roles are reversed. Uncle Bob is a well-known reference in the programming world and those who oppose his view are just unknown people on the internet. Who do you think benefits from social pressure here?\n\nMoreover, as other people said, it would be sad to be part of a community that encourages social pressure and shaming, for whatever purpose.", "created_utc": "1523273264.0", "edited": "False", "id": "dx2bmxm", "is_submitter": "False", "link_id": "t3_8ao7pc", "parent_id": "t1_dx1suuf", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I use them to handle model migrations in an event-sourced system. I have `FooV1`, `FooV2`, `FooV3`, which represents the different versions of `Foo` over time.\n\nI use `getField` to access the fields, until (maybe) we get a shorter syntax.\nBy the way, what happened to\n\n    instance HasField x r a => IsLabel x (r -> a) where\n        fromLabel = getField\n\n?", "created_utc": "1521794000.0", "edited": "False", "id": "dw5g5uc", "is_submitter": "False", "link_id": "t3_8693a3", "parent_id": "t1_dw3gwi9", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "You can already do:\n\n    getField @someField someFooValue\n\nSee https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.10.1.0/GHC-Records.html\n", "created_utc": "1521705499.0", "edited": "False", "id": "dw3fe8u", "is_submitter": "False", "link_id": "t3_8693a3", "parent_id": "t3_8693a3", "score": "15", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Uh, I didn't know about that.\n\nHowever the article seems to imply that it is standard Haskell behavior. To me, this looks just like a GHC trade-off to improve compilation times. If someone comes up with a solution, I guess it would be seen as a bug-fix rather than a breaking change.", "created_utc": "1518684603.0", "edited": "False", "id": "dua1qle", "is_submitter": "False", "link_id": "t3_7xgkez", "parent_id": "t1_du8too7", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "> You can relax things a bit and give \u201corphan instances\u201d for a type in other modules, but in so doing, you lose typeclass coherence guarantees, and it\u2019s now possible for different parts of your code to use different Foo instances\n\nAs far as I know this is impossible in Haskell.", "created_utc": "1518597066.0", "edited": "False", "id": "du85299", "is_submitter": "False", "link_id": "t3_7xgkez", "parent_id": "t3_7xgkez", "score": "8", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "How are newbies supposed to learn Eta? There is no documentation (except for the FFI) and the fact that Eta is Haskell is hidden in the FAQ.", "created_utc": "1484212541.0", "edited": "False", "id": "dcbpxe2", "is_submitter": "False", "link_id": "t3_5nczqt", "parent_id": "t1_dcbblsg", "score": "5", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Your company allowed an employee to suspend their work for a whole week to perform a pervasive change against the current conventions of the team, without any instructions or prior agreement.\n\nI think they have a bigger problem than imperative code. How could you even allocate this time without asking your manager?", "created_utc": "1476706865.0", "edited": "False", "id": "d8vlrx8", "is_submitter": "False", "link_id": "t3_57v4rv", "parent_id": "t3_57v4rv", "score": "9", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Yes, that's true. But performance is hard to predict in Haskell anyway, due to laziness and to GHC's aggressive optimizations.\n\nI suppose if you want fine-grained control over performance you should use a lower-level language (or you should profile everything and know GHC very well).", "created_utc": "1476433150.0", "edited": "False", "id": "d8ri3dw", "is_submitter": "False", "link_id": "t3_56qiw6", "parent_id": "t1_d8q15nd", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Of course it is better than unrestrained mutability.\nBut it doesn't guarantee the absence of side-effects and referential transparency. That means you cannot freely compose or refactor functions unless you have read the code and know that it is safe to do so, whereas referential transparency in Haskell allows you to do a lot of refactorings in a completely mechanical fashion without any risk.\n\nWhat is the most practical solution is a matter of personal preference, but personally I trust the compiler more than my memory or attention. That's why I like Haskell.", "created_utc": "1476347106.0", "edited": "False", "id": "d8q0h1b", "is_submitter": "False", "link_id": "t3_56qiw6", "parent_id": "t1_d8pr20g", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Most languages allow functions to modify their arguments in-place. Even standard library functions do that.\nDoesn't this count as messing with the local scope of another function?", "created_utc": "1476264840.0", "edited": "False", "id": "d8okmma", "is_submitter": "False", "link_id": "t3_56qiw6", "parent_id": "t1_d8n9vj2", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Just to be clear, I am not advocating implicits over type classes. I was just wondering whether the two could technically coexist.\n\nThat said, the use case I imagine for first-class modules is more like, for ex. a cache module with multiple backends, a pitch detection library allowing multiple algorithms etc.", "created_utc": "1468429446.0", "edited": "False", "id": "d5aso1o", "is_submitter": "True", "link_id": "t3_4smzl1", "parent_id": "t1_d5alkft", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Ok, I see. I didn't mean \"making Haskell modules first-class\". I imagined first-class modules more like a record of functions with some syntactic sugar to define all the signatures and to instantiate the different implementations. Of course you wouldn't define class instances in such a \"module\" (maybe I am using the wrong term).", "created_utc": "1468420660.0", "edited": "False", "id": "d5am28e", "is_submitter": "True", "link_id": "t3_4smzl1", "parent_id": "t1_d5akme3", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "If you are a complete beginner I advise you to learn Haskell from a book and do the exercises in the book. Once you know the basics, you will have at least an idea of what a game could look like.\n\nI am afraid whatever solution is proposed here will be unintelligible to you if you don't know the basic concepts. You will try (wrongly) to relate them to the concepts you know from Java and C# and you will be confused.", "created_utc": "1466716067.0", "edited": "False", "id": "d4lc6bk", "is_submitter": "False", "link_id": "t3_4pi0j3", "parent_id": "t3_4pi0j3", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "If I understand your problem, you are trying to do everything with manual recursion.\n\nThat's not idiomatic Haskell. Normally you would use higher-level combinators like [map](https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.8.2.0/Prelude.html#v:map), [filter](https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.8.2.0/Prelude.html#v:filter) etc. You don't need to keep a counter like you would do in a for loop in C.\n\nFor debugging, you can use [Debug.Trace](https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.8.2.0/Debug-Trace.html) to 'escape' IO and print debugging stuff, but in practice it is not needed that often.", "created_utc": "1458764882.0", "edited": "False", "id": "d1ay0r7", "is_submitter": "False", "link_id": "t3_4bgk8j", "parent_id": "t3_4bgk8j", "score": "2", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Thank you. Your 'mergeM' function looks like a good start. My actual use case is a little more complex than the example I gave. But I think you put me on the right track.", "created_utc": "1449060089.0", "edited": "False", "id": "cxkb093", "is_submitter": "False", "link_id": "t3_3uvf4p", "parent_id": "t1_cxjacar", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "I often need to zip/merge two or more lists non-sequentially, according to some arbitrary (sometimes stateful) criteria.\n\nFor example, imagine we have 2 lists of Int, xs and ys, and a function:\n\n    mergeBalanced :: [Int] -> [Int] -> [Int]\n    mergeBalanced xs ys = ...\n\n'mergeBalanced' takes one element at a time, keeping track of the sum of the elements already taken from xs and ys. It always takes the next element from the list with the lowest sum of taken elements.\n\nIs there any nice abstraction for this and similar cases, or am I stuck with manual recursion and State?", "created_utc": "1448963997.0", "edited": "False", "id": "cxiz7ts", "is_submitter": "False", "link_id": "t3_3uvf4p", "parent_id": "t3_3uvf4p", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Are the meetings in English? I think Leuven would be the closest one to me but I can't speak Dutch.", "created_utc": "1443698062.0", "edited": "False", "id": "cvkddpg", "is_submitter": "False", "link_id": "t3_3mwda0", "parent_id": "t1_cvjr6q3", "score": "1", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Anyone in Luxembourg or surroundings?\nI'd be glad to start a meetup if anyone is interested.", "created_utc": "1443615002.0", "edited": "False", "id": "cvj6kqd", "is_submitter": "False", "link_id": "t3_3mwda0", "parent_id": "t3_3mwda0", "score": "3", "subreddit": "haskell", "subreddit_id": "t5_2qh36"}, {"author": "lortabac", "body": "Consentimi di dissentire :)\n\nC'\u00e8 bisogno di tutorial in inglese, ma anche in italiano. Per due ragioni:\n\n- E' la nostra lingua madre, e non vedo perch\u00e9 non dovremmo utilizzarla in tutti i campi del sapere, come fanno i medici, gli avvocati etc.\n\n- Se puo' semplificare la vita a chi non \u00e8 a suo agio con l'inglese, perch\u00e9 no?", "created_utc": "1434390016.0", "edited": "False", "id": "cs7e0a3", "is_submitter": "False", "link_id": "t3_39osti", "parent_id": "t1_cs554lr", "score": "2", "subreddit": "Haskell_ITA", "subreddit_id": "t5_38kcb"}, {"author": "lortabac", "body": "Qualche commento al codice che hai linkato:\n\n* Sebbene scrivere manualmente *fact* sia un esercizio interessante, tieni presente che esiste una functione *product* che calcola il prodotto degli elementi di una lista.\n\n* Nella funzione *valore* mancano le parentesi intorno a *r - c*. Le funzioni hanno una priorit\u00e0 pi\u00f9 alta rispetto agli operatori.\n\n* In un blocco *do*, se usi l'indentazione non hai bisogno di mettere il punto e virgola.\n\n* Le righe del triangolo di Pascal cominciano da 0 e non da 1\n\nCOMMENTO AL SECONDO TENTATIVO:\n\n* Ripeto, le righe dovrebbero cominciare da 0 e non da 1\n\n* Se vuoi stampare l'intero triangolo anzich\u00e9 una riga sola, dai un'occhiata a *mapM_*, che mappa un'azione su una lista.", "created_utc": "1434143511.0", "edited": "1434199130.0", "id": "cs4nkjc", "is_submitter": "False", "link_id": "t3_39mgch", "parent_id": "t3_39mgch", "score": "3", "subreddit": "Haskell_ITA", "subreddit_id": "t5_38kcb"}, {"author": "lortabac", "body": "Non lo uso a lavoro, ma ho una serie di progetti personali che cerco di portare avanti nel tempo libero: un gestore di password, un'applicazione per la creazione di basi musicali e tanti altri (alcuni mai terminati)...", "created_utc": "1434032345.0", "edited": "False", "id": "cs315gp", "is_submitter": "False", "link_id": "t3_397wle", "parent_id": "t3_397wle", "score": "2", "subreddit": "Haskell_ITA", "subreddit_id": "t5_38kcb"}, {"author": "lortabac", "body": "> la IO monad e` lazy, e alcune operazioni come la lettura del contenuto di un file sono eseguite on-demand un pezzo alla volta o non eseguite per niente se non sono richieste dalle istruzioni successive\n\nNon sono sicuro, almeno per quanto riguarda la monade IO. Prova a lanciare questo programma:\n\n    main = do\n        _ <- getLine\n        putStrLn \"hello\"\n\nVedrai che getLine \u00e8 eseguito anche se il risultato \u00e8 scartato.\n\nLe funzioni di IO lazy, come getContents, sono basate su unsafeInterleaveIO, che in pratica \u00e8 un 'trucco' per renderle lazy.\n\nIn ogni caso si tratta di una propriet\u00e0 specifica di IO. La tua affermazione resta valida per le altre monadi.", "created_utc": "1434022813.0", "edited": "False", "id": "cs2wswp", "is_submitter": "False", "link_id": "t3_39bmut", "parent_id": "t1_cs2uxyb", "score": "3", "subreddit": "Haskell_ITA", "subreddit_id": "t5_38kcb"}, {"author": "lortabac", "body": "> in Haskell Monad \u00e8 la classe delle computazioni concatenabili\n\n+1, chiaro e conciso", "created_utc": "1434013223.0", "edited": "False", "id": "cs2ud2y", "is_submitter": "False", "link_id": "t3_39bmut", "parent_id": "t1_cs2bidl", "score": "2", "subreddit": "Haskell_ITA", "subreddit_id": "t5_38kcb"}, {"author": "lortabac", "body": "Personalmente non sono un grande fan di tutte queste definizioni e metafore sulle monadi.\n\nPer me una monade \u00e8 una classe che supporta le operazioni return e >>=, e che obbedisce alle leggi delle monadi (identit\u00e0 destra e sinistra e associativit\u00e0). E' solo una di tante classi che in Haskell sono definite da leggi (funtore, applicativo, monoide etc.).\n\nL'unica ragione che le conferisce uno statuto particolare \u00e8 che \u00e8 l'unico modo per operare in IO, in particolare per utilizzare il risultato di un'azione come argomento dell'azione seguente.\n\nDetto cio, se dovessi spiegare le monadi a un principiante, lo farei piuttosto con degli esempi pratici, presentando IO, Maybe, List separatamente, senza cercare subito una definizione comune.", "created_utc": "1433969581.0", "edited": "False", "id": "cs284u9", "is_submitter": "False", "link_id": "t3_39bmut", "parent_id": "t3_39bmut", "score": "3", "subreddit": "Haskell_ITA", "subreddit_id": "t5_38kcb"}]